<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <cache/>
    
    <!--使用参照缓存，解决脏数据问题。 当某几个表可以作为一个业务整体时，通常让几个会关联的ER表同时使用用一个二级缓存，这样就就能解决脏数据问题。-->
    <cache-ref namespace="tk.mybatis.simple.mapper.RoleMapper"/>
    

    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>
    <select id="selectAll" resultMap="userMap">
        select id,
               user_name,
               user_password,
               user_email,
               user_info,
               head_img,
               create_time createTime
        from sys_user
    </select>
    <select id="selectById" resultType="tk.mybatis.simple.model.SysUser">
        select * from sys_user where id = #{id}
    </select>
    <select id="selectRoleByUserIdAndRoleEnabled"
            resultType="tk.mybatis.simple.model.SysRole">
        select
            r.id,
               r.role_name roleName,
               r.enabled,
               r.create_by createBy,
               r.create_time createTime
            from sys_user u
            inner join sys_user_role ur on u.id = ur.user_id
            inner join sys_role r on ur.role_id = r.id
            where u.id = #{userId} and r.enabled = #{enabled}
    </select>
    <select id="selectRolesByUserAndRole" resultType="tk.mybatis.simple.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
                 inner join sys_role r on ur.role_id = r.id
        where u.id = #{user.id} and r.enabled = #{role.enabled}
    </select>
    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        select id,
               user_name userName,
               user_password userPassword,
               user_email userEmail,
               user_info userInfo,
               head_img headImg,
               create_time createTime
        from sys_user
<!--        此种写法只用到if标签-->
<!--        where 1=1-->
<!--        <if test="userName != null and userName != ''">-->
<!--            and user_name like concat('%',#{userName},'%')-->
<!--        </if>-->
<!--        <if test="userEmail != null and userEmail != ''">-->
<!--            and user_email = #{userEmail}-->
<!--        </if>-->

<!--        还可以用where标签来写-->
        <where>
            <if test="userName != null and userName != ''">
                and user_name like concat('%',#{userName},'%')
            </if>
            <if test="userEmail != '' and userEmail != null">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>
    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        select id,
               user_name userName,
               user_password userPassword,
               user_email userEmail,
               user_info userInfo,
               head_img headImg,
               create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null">
                and id =#{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>


    </select>
    <select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
        select id,
               user_name userName,
               user_password userPassword,
               user_email userEmail,
               user_info userInfo,
               head_img headImg,
               create_time createTime
        from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>
    <select id="selectUserAndRoleById" resultType="tk.mybatis.simple.model.SysUser">
        select
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_email userEmail,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            r.id "role.id",
            r.role_name "role.roleName",
            r.enabled "role.enabled",
            r.create_by "role.createBy",
            r.create_time "role.createTime"
            from sys_user u
            inner join sys_user_role ur on u.id = ur.user_id
            inner join sys_role r on ur.role_id = r.id
            where u.id = #{id}
    </select>
<!--    关联的嵌套结果映射-->
<!--    <resultMap id="userRoleMap" extends="userMap"-->
<!--               type="tk.mybatis.simple.model.SysUser">-->
<!--        &lt;!&ndash; 使用映射继承后，下面部分可注释&ndash;&gt;-->
<!--&lt;!&ndash;        <id property="id" column="id"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="userName" column="user_name"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="userPassword" column="user_password"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="userEmail" column="user_email"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="userInfo" column="user_info"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="headImg" column="head_img" jdbcType="BLOB"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>&ndash;&gt;-->

<!--        &lt;!&ndash;        role相关属性&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="role.id" column="role_id"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="role.roleName" column="role_name"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="role.enabled" column="enabled"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="role.createBy" column="create_by"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>&ndash;&gt;-->

    <!--        &lt;!&ndash; 改成association的配置方式&ndash;&gt;-->
<!--        <association property="role" columnPrefix="role_" javaType="tk.mybatis.simple.model.SysRole">-->
<!--            <result property="role.id" column="role_id"/>-->
<!--            <result property="role.roleName" column="role_name"/>-->
<!--            <result property="role.enabled" column="enabled"/>-->
<!--            <result property="role.createBy" column="create_by"/>-->
<!--            <result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>-->
<!--        </association>-->
<!--    </resultMap>-->
    <resultMap id="userRoleMap" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <association property="role" columnPrefix="role_"
                     resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>
    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        select
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
                 inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>

<!--    利用简单的SQL通过多次查询获取我们需要的结果。-->
    <resultMap id="userRoleMapSelect" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <association property="role"
                     fetchType="lazy"
                     column="{id=role_id}"
                     select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"/>
    </resultMap>
    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        select
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            ur.role_id
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        where u.id = #{id}
    </select>

<!--    <resultMap id="userRoleListMap" extends="userMap"-->
<!--               type="tk.mybatis.simple.model.SysUser">-->
<!--        <id property="id" column="id"/>-->
<!--        <result property="userName" column="user_name"/>-->
<!--        <result property="userPassword" column="user_password"/>-->
<!--        <result property="userEmail" column="user_email"/>-->
<!--        <result property="userInfo" column="user_info"/>-->
<!--        <result property="headImg" column="head_img" jdbcType="BLOB"/>-->
<!--        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->
<!--        <collection property="roleList" columnPrefix="role_" javaType="tk.mybatis.simple.model.SysRole">-->
<!--            <id property="id" column="id"/>-->
<!--            <result property="roleName" column="role_name" />-->
<!--            <result property="enaled" column="enabled" />-->
<!--            <result property="createBy" column="create_by" />-->
<!--            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->

<!--        </collection>-->
<!--    </resultMap>-->
    <!-- 对上面的ResultMap简化-->
    <resultMap id="userRoleListMap" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>
    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        select
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time,
            p.id role_privilege_id,
            p.privilege_name role_privilege_privilege_name,
            p.privilege_url role_privilege_privilege_url
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        inner join sys_role_privilege rp on rp.role_id = r.id
        inner join sys_privilege p on p.id = rp.privilege_id
    </select>

    <resultMap id="userRoleListMapSelect" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <collection property="roleList"
                    fetchType="lazy"
                    select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"
                    column="{userId=id}"/>
    </resultMap>
    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        select
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time
        from sys_user u
        where u.id = #{id}

    </select>

    <!-- 调用存储过程，根据用户id查询用户其他信息-->
    <select id="selectUserById" statementType="CALLABLE" useCache="false">
        {call select_user_by_id(
            #{id, mode = IN},
            #{userName, mode=OUT, jdbcType=VARCHAR},
            #{userPassword, mode=OUT,jdbcType=VARCHAR},
            #{userEmail, mode=OUT, jdbcType=VARCHAR},
            #{userInfo, mode=OUT, jdbcType=VARCHAR},
            #{headImg, mode=OUT, jdbcType=BLOB, javaType=_byte[]},
            #{createTime, mode=OUT, jdbcType=TIMESTAMP}
            )
        }
    </select>

    <!-- 简单根据用户名和分页参数进行查询，返回总数和分页数据-->
    <select id="selectUserPage" statementType="CALLABLE" useCache="false"
            resultMap="userMap">
        {call select_user_page(
            #{userName, mode=IN},
            #{offset, mode=IN},
            #{limit, mode=IN},
            #{total, mode = OUT, jdbcType = BIGINT}
            )
        }
    </select>

    <!--  调用存储过程保存用户信息和角色关联信息-->
    <insert id="insertUserAndRoles" statementType="CALLABLE">
        {call insert_user_and_roles(
                #{user.id, mode=OUT, jdbcType=BIGINT},
                #{user.userName, mode = IN},
                #{user.userPassword, mode = IN},
                #{user.userEmail, mode = IN},
                #{user.userInfo, mode = IN},
                #{user.headImg, mode = IN ,jdbcType = BLOB},
                #{user.createTime , mode = OUT, jdbcType = TIMESTAMP},
                #{roleIds, mode = IN}
            )
            }
    </insert>
    <!--    调用存储过程删除用户信息和角色关联信息-->
    <delete id="deleteUserById" statementType="CALLABLE">
        {call delete_user_by_id(#{id, mode = IN})}
    </delete>


    <insert id="insert">
        insert into sys_user(
                             id,user_name,user_password, user_email,
                             user_info, head_img, create_time
        )values(
                #{id}, #{userName}, #{userPassword}, #{userEmail},
                #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType= TIMESTAMP}
                       )
    </insert>
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
            user_name,user_password,
            <if test="userEmail != null and userEmail != '' ">
                user_email,
            </if>
            user_info, head_img, create_time
        )values(
                   #{userName}, #{userPassword},
                   <if test="userEmail != null and userEmail != ''">
                       #{userEmail},
                   </if>
                   #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType= TIMESTAMP}
               )

    </insert>
    <insert id="insert3">
        insert into sys_user(
            user_name,user_password, user_email,
            user_info, head_img, create_time
        )values(
                   #{userName}, #{userPassword}, #{userEmail},
                   #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType= TIMESTAMP}
               )
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <insert id="insertList" parameterType="java.util.List">
        insert into sys_user(
                     user_name,
                     user_password,
                     user_email,
                     user_info,
                     head_img,
                     create_time)
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userName},
            #{user.userPassword},
            #{user.userEmail},
            #{user.userInfo},
            #{user.headImg, jdbcType=BLOB},
            #{user.createTime, jdbcType=TIMESTAMP})
        </foreach>
    </insert>
    <update id="updateById">
        update sys_user
        set user_name = #{userName},
            user_password = #{userPassword},
            user_email = #{userEmail},
            user_info = #{userInfo},
            head_img = #{headImg,jdbcType = BLOB},
            create_time = #{createTime,jdbcType = TIMESTAMP}
        where id =#{id}
    </update>
    <update id="updateByIdSelective">
        update sys_user
<!--        这种写法只用了if标签-->
<!--         set-->
<!--            <if test="userName != null and userName != ''">-->
<!--                user_name = #{userName},-->
<!--            </if>-->
<!--            <if test="userPassword != null and userPassword != ''">-->
<!--                user_password = #{userPassword},-->
<!--            </if>-->
<!--            <if test="userEmail != null and userEmail != ''">-->
<!--                user_email = #{userEmail},-->
<!--            </if>-->
<!--            <if test="userInfo != null and userInfo != ''">-->
<!--                user_info = #{userInfo},-->
<!--            </if>-->
<!--            <if test="headImg != null">-->
<!--                head_img = #{headImg,jdbcType = BLOB},-->
<!--            </if>-->
<!--            <if test="createTime != null">-->
<!--                create_time = #{createTime,jdbcType = TIMESTAMP},-->
<!--            </if>-->
<!--&lt;!&ndash; 为什么会有这一句，因为这里只用了if标签，1.若上面所有条件均为false，且无此句，SQL语法错误，2.每个后面都有一个逗号&ndash;&gt;-->
<!--            id = #{id}-->

<!--            这种用了set标签+if标签，可以省去上面的最后一句id = #{id}-->
            <set>
                <if test="userName != null and userName != ''">
                    user_name = #{userName},
                </if>
                <if test="userPassword != null and userPassword != ''">
                    user_password = #{userPassword},
                </if>
                <if test="userEmail != null and userEmail != ''">
                    user_email = #{userEmail},
                </if>
                <if test="userInfo != null and userInfo != ''">
                    user_info = #{userInfo},
                </if>
                <if test="headImg != null">
                    head_img = #{headImg,jdbcType = BLOB},
                </if>
                <if test="createTime != null">
                    create_time = #{createTime,jdbcType = TIMESTAMP},
                </if>
            </set>
        where id = #{id}
    </update>
    <update id="updateByMap">
        update sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>
    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>
</mapper>
